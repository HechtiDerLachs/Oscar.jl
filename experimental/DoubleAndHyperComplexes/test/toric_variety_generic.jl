@testset "Spectral sequences for complexes of sheaves on toric varieties." begin
  # include library for algebraic computations
  if isdefined(Main, :Oscar) == false
    using Oscar;
  end

  # Exponents of polynomials with undetermined coefficients
  support_mats = [[0 0;2 7;1 3],[0 0;2 5;1 2],[3 0;1 1]];

  # Coefficients of polynomials
  coef = [[4,-1,3],[2,5,7],[1,-3]];

  R, a = polynomial_ring(QQ, vcat([["a$(i)_$(j)" for j in 1:nrows(A)] for (i, A) in enumerate(support_mats)]...))

  a_groups = Vector{elem_type(R)}[]
  offset = 0
  for A in support_mats
    push!(a_groups, a[offset+1:offset+nrows(A)])
    offset += nrows(A)
  end


  # Newton polytopes of support sets
  Q = map( convex_hull, support_mats);

  # Toric variety specified by the normal fan of the Minkowski sum of all Newton polytopes  
  X = normal_toric_variety( reduce( minkowski_sum, Q) );
  S = cox_ring(X);
  S_ext, to_S_ext = change_base_ring(R, S)

  x = gens(S_ext);

  # Ray generators in fan of toric variety
  U = map( primitive_generator, rays(X));

  # Coordinates of Cartier divisors in X of the system's Newton polytopes
  div_coords = [map(u -> -minimum( grad*primitive_generator(u) ), rays(X)) for grad in support_mats];

  # Homogeneous polynomials specified by characters in supports
  f = [sum( [a_groups[k][j] * prod( [x[i]^( dot( support_mats[k][j,:], U[i]) + div_coords[k][i] ) for i = 1:n_rays(X)] ) for j = 1:size(support_mats[k],1)] ) for k = 1:length(support_mats)];

  # Koszul complex generated by these polynomials (just for testing)
  Koszul_F = Oscar.HomogKoszulComplex(S_ext,f);

  css = Oscar.CohomologySpectralSequence(X, to_S_ext, Koszul_F);
  @time map(css[3], 3, -2);

  p=1
  [ngens(css[p, i, j]) for j in 0:-1:-7, i in 0:3]
  @test !is_zero(map(css[p], 3, -2))

  p=2
  [ngens(css[p, i, j]) for j in 0:-1:-7, i in 0:3]
  @test is_zero(map(css[p], 3, -2))

  p=3
  [ngens(css[p, i, j]) for j in 0:-1:-7, i in 0:3]
  @test !is_zero(map(css[p], 3, -2))
end

